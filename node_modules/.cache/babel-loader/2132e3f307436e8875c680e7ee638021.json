{"ast":null,"code":"import axios from 'axios';\nexport var LOGIN_START = 'LOGIN_START';\nexport var ERROR = 'ERROR';\nexport var GETTING_FRIENDS = 'GETTING_FRIENDS';\nexport var GET_FRIENDS = 'GET_FRIENDS';\nexport var ADDING_FRIEND = 'ADDING_FRIEND';\nexport var ADD_FRIEND = 'ADD_FRIEND';\nexport var login = function login(creds) {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN_START\n    });\n    return axios.post('http://localhost:5000/api/login', creds).then(function (res) {\n      localStorage.setItem('token', res.data.payload);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: res.data.payload\n      });\n    });\n  };\n};\nexport var getFriends = function getFriends() {\n  var friends = axios.get('http://localhost:5000/api/friends', {\n    headers: {\n      Authorization: localStorage.getItem('token')\n    }\n  });\n  return function (dispatch) {\n    dispatch({\n      type: GETTING_FRIENDS\n    });\n    friends.then(function (response) {\n      dispatch({\n        type: GET_FRIENDS,\n        payload: response.data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: ERROR,\n        payload: err\n      });\n    });\n  };\n};\nexport var addFriend = function addFriend() {\n  var newFriend = axios.post('http://localhost:5000/api/friends', {\n    headers: {\n      Authorization: localStorage.getItem('token')\n    }\n  });\n  return function (dispatch) {\n    dispatch({\n      type: ADDING_FRIEND\n    });\n    newFriend.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: ADD_FRIEND,\n        payload: data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: ERROR,\n        payload: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Laryna/Lambda/Redux-Friends/friends/src/actions/index.js"],"names":["axios","LOGIN_START","ERROR","GETTING_FRIENDS","GET_FRIENDS","ADDING_FRIEND","ADD_FRIEND","login","creds","dispatch","type","post","then","res","localStorage","setItem","data","payload","getFriends","friends","get","headers","Authorization","getItem","response","catch","err","addFriend","newFriend"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,IAAMC,KAAK,GAAG,OAAd;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,UAAU,GAAE,YAAlB;AAEP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SAAI,UAAAC,QAAQ,EAAI;AACtCA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,WAAOD,KAAK,CAACW,IAAN,CAAW,iCAAX,EAA8CH,KAA9C,EACNI,IADM,CACD,UAAAC,GAAG,EAAI;AAACC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAAG,CAACG,IAAJ,CAASC,OAAvC;AACdR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,eAAR;AAAyBO,QAAAA,OAAO,EAAEJ,GAAG,CAACG,IAAJ,CAASC;AAA3C,OAAD,CAAR;AACC,KAHM,CAAP;AAIH,GANyB;AAAA,CAAnB;AAQP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,MAAMC,OAAO,GAAGnB,KAAK,CAACoB,GAAN,CAAU,mCAAV,EAA+C;AAC7DC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAER,YAAY,CAACS,OAAb,CAAqB,OAArB;AAAjB;AADoD,GAA/C,CAAhB;AAGE,SAAO,UAAAd,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACEgB,IAAAA,OAAO,CACRP,IADC,CACI,UAAAY,QAAQ,EAAI;AAChBf,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN,WAAR;AAAqBa,QAAAA,OAAO,EAAEO,QAAQ,CAACR;AAAvC,OAAD,CAAR;AACD,KAHC,EAIDS,KAJC,CAIK,UAAAC,GAAG,EAAI;AACZjB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,KAAR;AAAee,QAAAA,OAAO,EAAES;AAAxB,OAAD,CAAR;AACD,KANC;AAOH,GATD;AAUH,CAdM;AAgBP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAMC,SAAS,GAAG5B,KAAK,CAACW,IAAN,CAAW,mCAAX,EAAgD;AAChEU,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAER,YAAY,CAACS,OAAb,CAAqB,OAArB;AAAjB;AADuD,GAAhD,CAAlB;AAGA,SAAO,UAAAd,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACEuB,IAAAA,SAAS,CACVhB,IADC,CACI,gBAAc;AAAA,UAAXI,IAAW,QAAXA,IAAW;AAClBP,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,UAAR;AAAoBW,QAAAA,OAAO,EAAED;AAA7B,OAAD,CAAR;AACD,KAHC,EAIDS,KAJC,CAIK,UAAAC,GAAG,EAAI;AACZjB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,KAAR;AAAee,QAAAA,OAAO,EAAES;AAAxB,OAAD,CAAR;AACD,KANC;AAOH,GATD;AAUD,CAdM","sourcesContent":["import axios from 'axios';\n\nexport const LOGIN_START = 'LOGIN_START';\n\nexport const ERROR = 'ERROR';\nexport const GETTING_FRIENDS = 'GETTING_FRIENDS';\nexport const GET_FRIENDS = 'GET_FRIENDS';\n\nexport const ADDING_FRIEND = 'ADDING_FRIEND';\nexport const ADD_FRIEND ='ADD_FRIEND';\n\nexport const login = creds => dispatch => {\n    dispatch({ type: LOGIN_START });\n    return axios.post('http://localhost:5000/api/login', creds)\n    .then(res => {localStorage.setItem('token', res.data.payload);\n    dispatch({ type: 'LOGIN_SUCCESS', payload: res.data.payload });\n    })\n}\n\nexport const getFriends = () => {\n  const friends = axios.get('http://localhost:5000/api/friends', {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n    return dispatch => {\n      dispatch({ type: GETTING_FRIENDS });\n        friends\n      .then(response => {\n        dispatch({ type: GET_FRIENDS, payload: response.data });\n      })\n      .catch(err => {\n        dispatch({ type: ERROR, payload: err });\n      });\n    };\n};\n\nexport const addFriend = () => {\n  const newFriend = axios.post('http://localhost:5000/api/friends', {\n    headers: { Authorization: localStorage.getItem('token') }\n})\n  return dispatch => {\n    dispatch({ type: ADDING_FRIEND });\n      newFriend\n    .then(({ data }) => {\n      dispatch({ type: ADD_FRIEND, payload: data });\n    })\n    .catch(err => {\n      dispatch({ type: ERROR, payload: err });\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}