{"ast":null,"code":"import axios from 'axios';\nexport var ERROR = 'ERROR';\nexport var ADDING_USER = 'ADDING_USER';\nexport var ADD_USER = 'ADD_USER';\nexport var addUser = function addUser(user) {\n  var newUser = axios.post('https://expat-journal.herokuapp.com/api/auth/register', user).then(function (res) {\n    return console.log(res);\n  });\n  return function (dispatch) {\n    dispatch({\n      type: ADDING_USER\n    });\n    newUser.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: ADD_USER,\n        payload: data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: ERROR,\n        payload: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Laryna/Lambda/Front-End-Architect-Laryna-Billinghurst-/my-app/src/actions/index.js"],"names":["axios","ERROR","ADDING_USER","ADD_USER","addUser","user","newUser","post","then","res","console","log","dispatch","type","data","payload","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,KAAK,GAAG,OAAd;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,QAAQ,GAAE,UAAhB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI,EAAI;AAC7B,MAAMC,OAAO,GAAGN,KAAK,CAACO,IAAN,CAAW,uDAAX,EAAoEF,IAApE,EACdG,IADc,CACR,UAAAC,GAAG;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,GADK,CAAhB;AAEA,SAAO,UAAAG,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACEI,IAAAA,OAAO,CACRE,IADC,CACI,gBAAc;AAAA,UAAXM,IAAW,QAAXA,IAAW;AAClBF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEV,QAAR;AAAkBY,QAAAA,OAAO,EAAED;AAA3B,OAAD,CAAR;AACD,KAHC,EAIDE,KAJC,CAIK,UAAAC,GAAG,EAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEZ,KAAR;AAAec,QAAAA,OAAO,EAAEE;AAAxB,OAAD,CAAR;AACD,KANC;AAOH,GATD;AAUD,CAbM","sourcesContent":["import axios from 'axios';\n\nexport const ERROR = 'ERROR';\nexport const ADDING_USER = 'ADDING_USER';\nexport const ADD_USER ='ADD_USER';\n\nexport const addUser = user => {\n  const newUser = axios.post('https://expat-journal.herokuapp.com/api/auth/register', user\n  ).then( res => console.log(res))\n  return dispatch => {\n    dispatch({ type: ADDING_USER });\n      newUser\n    .then(({ data }) => {\n      dispatch({ type: ADD_USER, payload: data });\n    })\n    .catch(err => {\n      dispatch({ type: ERROR, payload: err });\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}